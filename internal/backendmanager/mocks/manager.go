// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	backendmanager "github.com/kyma-project/kyma-companion-manager/internal/backendmanager"

	corev1 "k8s.io/api/core/v1"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/apps/v1"

	v1alpha1 "github.com/kyma-project/kyma-companion-manager/api/v1alpha1"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GenerateNewDeployment provides a mock function with given fields: companion, backendImage
func (_m *Manager) GenerateNewDeployment(companion *v1alpha1.Companion, backendImage string) (*v1.Deployment, error) {
	ret := _m.Called(companion, backendImage)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewDeployment")
	}

	var r0 *v1.Deployment
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Companion, string) (*v1.Deployment, error)); ok {
		return rf(companion, backendImage)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.Companion, string) *v1.Deployment); ok {
		r0 = rf(companion, backendImage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Deployment)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.Companion, string) error); ok {
		r1 = rf(companion, backendImage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateNewSecret provides a mock function with given fields: companion, config
func (_m *Manager) GenerateNewSecret(companion *v1alpha1.Companion, config backendmanager.Config) (*corev1.Secret, error) {
	ret := _m.Called(companion, config)

	if len(ret) == 0 {
		panic("no return value specified for GenerateNewSecret")
	}

	var r0 *corev1.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Companion, backendmanager.Config) (*corev1.Secret, error)); ok {
		return rf(companion, config)
	}
	if rf, ok := ret.Get(0).(func(*v1alpha1.Companion, backendmanager.Config) *corev1.Secret); ok {
		r0 = rf(companion, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corev1.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(*v1alpha1.Companion, backendmanager.Config) error); ok {
		r1 = rf(companion, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendConfig provides a mock function with given fields: ctx
func (_m *Manager) GetBackendConfig(ctx context.Context) (*backendmanager.Config, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendConfig")
	}

	var r0 *backendmanager.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*backendmanager.Config, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *backendmanager.Config); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backendmanager.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewManager creates a new instance of Manager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Manager {
	mock := &Manager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
